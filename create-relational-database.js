const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

/**
 * Comprehensive Relational Database Creation Script
 * Based on Google Sheets Student Registration System Analysis
 *
 * This script creates a normalized relational database with proper foreign keys
 * and relationships to replace the flat Google Sheets structure.
 */

async function createRelationalDatabase() {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseKey) {
    console.log('‚ùå Supabase credentials not found');
    console.log('Please set SUPABASE_URL and SUPABASE_ANON_KEY in your .env file');
    return;
  }

  const supabase = createClient(supabaseUrl, supabaseKey);

  try {
    console.log('üöÄ Creating Comprehensive Relational Database...');
    console.log('üìä Based on Google Sheets Student Registration System Analysis');
    console.log('');

    // 1. Create Grade Levels lookup table
    console.log('üìö Creating grade_levels table...');
    await executeSQL(supabase, `
      CREATE TABLE IF NOT EXISTS grade_levels (
        id SERIAL PRIMARY KEY,
        code VARCHAR(10) UNIQUE NOT NULL,
        name VARCHAR(50) NOT NULL,
        name_arabic VARCHAR(50) NOT NULL,
        sort_order INTEGER NOT NULL,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // 2. Create Subscription Types lookup table
    console.log('üí≥ Creating subscription_types table...');
    await executeSQL(supabase, `
      CREATE TABLE IF NOT EXISTS subscription_types (
        id SERIAL PRIMARY KEY,
        code VARCHAR(20) UNIQUE NOT NULL,
        name VARCHAR(100) NOT NULL,
        name_arabic VARCHAR(100) NOT NULL,
        amount DECIMAL(10,2) NOT NULL,
        duration_months INTEGER NOT NULL,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // 3. Create main Students table
    console.log('üë• Creating students table...');
    await executeSQL(supabase, `
      CREATE TABLE IF NOT EXISTS students (
        id SERIAL PRIMARY KEY,
        student_code VARCHAR(20) UNIQUE NOT NULL,
        full_name_arabic TEXT NOT NULL,
        full_name_english TEXT,
        grade_level_id INTEGER REFERENCES grade_levels(id),
        date_of_birth DATE,
        gender VARCHAR(10),
        nationality VARCHAR(50) DEFAULT 'ŸÖÿµÿ±Ÿä',
        address TEXT,
        notes TEXT,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // 4. Create Contact Information table
    console.log('üìû Creating student_contacts table...');
    await executeSQL(supabase, `
      CREATE TABLE IF NOT EXISTS student_contacts (
        id SERIAL PRIMARY KEY,
        student_id INTEGER REFERENCES students(id) ON DELETE CASCADE,
        contact_type VARCHAR(20) NOT NULL, -- 'transfer_phone', 'whatsapp_phone', 'parent_phone', 'emergency'
        phone_number VARCHAR(20) NOT NULL,
        contact_name VARCHAR(100),
        relationship VARCHAR(50), -- 'father', 'mother', 'guardian', 'self'
        is_primary BOOLEAN DEFAULT false,
        is_whatsapp BOOLEAN DEFAULT false,
        notes TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // 5. Create Registrations table
    console.log('üìù Creating registrations table...');
    await executeSQL(supabase, `
      CREATE TABLE IF NOT EXISTS registrations (
        id SERIAL PRIMARY KEY,
        student_id INTEGER REFERENCES students(id) ON DELETE CASCADE,
        registration_timestamp TIMESTAMP NOT NULL,
        registration_date DATE NOT NULL,
        subscription_type_id INTEGER REFERENCES subscription_types(id),
        transfer_phone VARCHAR(20),
        whatsapp_phone VARCHAR(20),
        transfer_amount DECIMAL(10,2),
        transfer_date DATE,
        transfer_time TIME,
        transfer_image_url TEXT,
        is_confirmed BOOLEAN DEFAULT false,
        has_notes BOOLEAN DEFAULT false,
        notes TEXT,
        academic_year VARCHAR(10),
        semester VARCHAR(20),
        registration_source VARCHAR(50) DEFAULT 'google_form',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // 6. Create Payments/Transfers table
    console.log('üí∞ Creating payments table...');
    await executeSQL(supabase, `
      CREATE TABLE IF NOT EXISTS payments (
        id SERIAL PRIMARY KEY,
        student_id INTEGER REFERENCES students(id) ON DELETE CASCADE,
        registration_id INTEGER REFERENCES registrations(id),
        payment_method VARCHAR(30) DEFAULT 'bank_transfer',
        amount DECIMAL(10,2) NOT NULL,
        currency VARCHAR(10) DEFAULT 'EGP',
        payment_date DATE NOT NULL,
        payment_time TIME,
        transfer_reference VARCHAR(100),
        transfer_phone VARCHAR(20),
        payment_proof_url TEXT,
        payment_status VARCHAR(20) DEFAULT 'pending', -- 'pending', 'confirmed', 'rejected'
        confirmed_at TIMESTAMP,
        confirmed_by VARCHAR(100),
        notes TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // 7. Create Subscriptions table
    console.log('üìÖ Creating subscriptions table...');
    await executeSQL(supabase, `
      CREATE TABLE IF NOT EXISTS subscriptions (
        id SERIAL PRIMARY KEY,
        student_id INTEGER REFERENCES students(id) ON DELETE CASCADE,
        registration_id INTEGER REFERENCES registrations(id),
        subscription_type_id INTEGER REFERENCES subscription_types(id),
        start_date DATE NOT NULL,
        end_date DATE NOT NULL,
        amount_paid DECIMAL(10,2) NOT NULL,
        payment_status VARCHAR(20) DEFAULT 'active', -- 'active', 'expired', 'cancelled'
        auto_renewal BOOLEAN DEFAULT false,
        notes TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // 8. Create Student Performance table
    console.log('üìà Creating student_performance table...');
    await executeSQL(supabase, `
      CREATE TABLE IF NOT EXISTS student_performance (
        id SERIAL PRIMARY KEY,
        student_id INTEGER REFERENCES students(id) ON DELETE CASCADE,
        academic_year VARCHAR(10) NOT NULL,
        month VARCHAR(20) NOT NULL,
        session_number INTEGER NOT NULL,
        performance_grade VARCHAR(10), -- 'A', 'B+', 'B', 'C+', 'C', etc.
        quiz_score INTEGER, -- 0-100
        attendance_status VARCHAR(20) DEFAULT 'present', -- 'present', 'absent', 'late'
        homework_status VARCHAR(20), -- 'completed', 'partial', 'not_submitted'
        participation_level VARCHAR(20), -- 'excellent', 'good', 'average', 'poor'
        teacher_notes TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // 9. Create Administrative Logs table
    console.log('üìã Creating admin_logs table...');
    await executeSQL(supabase, `
      CREATE TABLE IF NOT EXISTS admin_logs (
        id SERIAL PRIMARY KEY,
        table_name VARCHAR(50) NOT NULL,
        record_id INTEGER,
        action VARCHAR(20) NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'
        old_values JSONB,
        new_values JSONB,
        admin_user VARCHAR(100),
        ip_address VARCHAR(45),
        user_agent TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // 10. Create Import History table
    console.log('üì• Creating import_history table...');
    await executeSQL(supabase, `
      CREATE TABLE IF NOT EXISTS import_history (
        id SERIAL PRIMARY KEY,
        import_type VARCHAR(50) NOT NULL, -- 'google_sheets', 'csv', 'manual'
        source_file VARCHAR(255),
        total_records INTEGER NOT NULL,
        successful_imports INTEGER NOT NULL,
        failed_imports INTEGER NOT NULL,
        import_summary JSONB,
        error_log TEXT,
        started_at TIMESTAMP NOT NULL,
        completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    console.log('');
    console.log('üîß Creating indexes for better performance...');

    // Create indexes for better performance
    const indexes = [
      'CREATE INDEX IF NOT EXISTS idx_students_code ON students(student_code);',
      'CREATE INDEX IF NOT EXISTS idx_students_grade ON students(grade_level_id);',
      'CREATE INDEX IF NOT EXISTS idx_students_active ON students(is_active);',
      'CREATE INDEX IF NOT EXISTS idx_contacts_student ON student_contacts(student_id);',
      'CREATE INDEX IF NOT EXISTS idx_contacts_phone ON student_contacts(phone_number);',
      'CREATE INDEX IF NOT EXISTS idx_registrations_student ON registrations(student_id);',
      'CREATE INDEX IF NOT EXISTS idx_registrations_date ON registrations(registration_date);',
      'CREATE INDEX IF NOT EXISTS idx_payments_student ON payments(student_id);',
      'CREATE INDEX IF NOT EXISTS idx_payments_status ON payments(payment_status);',
      'CREATE INDEX IF NOT EXISTS idx_subscriptions_student ON subscriptions(student_id);',
      'CREATE INDEX IF NOT EXISTS idx_subscriptions_dates ON subscriptions(start_date, end_date);',
      'CREATE INDEX IF NOT EXISTS idx_performance_student ON student_performance(student_id);',
      'CREATE INDEX IF NOT EXISTS idx_performance_month ON student_performance(academic_year, month);'
    ];

    for (const indexSQL of indexes) {
      await executeSQL(supabase, indexSQL);
    }

    console.log('');
    console.log('üìã Inserting lookup data...');

    // Insert grade levels
    await executeSQL(supabase, `
      INSERT INTO grade_levels (code, name, name_arabic, sort_order) VALUES
      ('G4', 'Grade 4', 'ÿßŸÑÿµŸÅ ÿßŸÑÿ±ÿßÿ®ÿπ ÿßŸÑÿßÿ®ÿ™ÿØÿßÿ¶Ÿä', 4),
      ('G5', 'Grade 5', 'ÿßŸÑÿµŸÅ ÿßŸÑÿÆÿßŸÖÿ≥ ÿßŸÑÿßÿ®ÿ™ÿØÿßÿ¶Ÿä', 5),
      ('G6', 'Grade 6', 'ÿßŸÑÿµŸÅ ÿßŸÑÿ≥ÿßÿØÿ≥ ÿßŸÑÿßÿ®ÿ™ÿØÿßÿ¶Ÿä', 6),
      ('P1', 'Prep 1', 'ÿßŸÑÿµŸÅ ÿßŸÑÿ£ŸàŸÑ ÿßŸÑÿ•ÿπÿØÿßÿØŸä', 7)
      ON CONFLICT (code) DO NOTHING;
    `);

    // Insert subscription types
    await executeSQL(supabase, `
      INSERT INTO subscription_types (code, name, name_arabic, amount, duration_months) VALUES
      ('MONTHLY_120', 'Monthly Subscription', 'ÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿ¥Ÿáÿ±Ÿä 120ÿ¨', 120.00, 1),
      ('TERM_600', 'Term Subscription', 'ÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿßŸÑÿ™ÿ±ŸÖ 600ÿ¨', 600.00, 3)
      ON CONFLICT (code) DO NOTHING;
    `);

    console.log('');
    console.log('üìä Creating database views for easy querying...');

    // Create comprehensive view for student data
    await executeSQL(supabase, `
      CREATE OR REPLACE VIEW student_summary AS
      SELECT
        s.id,
        s.student_code,
        s.full_name_arabic,
        s.full_name_english,
        gl.name as grade_level,
        gl.name_arabic as grade_level_arabic,
        s.is_active,
        r.registration_timestamp,
        r.is_confirmed as registration_confirmed,
        st.name as subscription_type,
        st.name_arabic as subscription_type_arabic,
        st.amount as subscription_amount,
        p.amount as amount_paid,
        p.payment_status,
        p.payment_date,
        sc_transfer.phone_number as transfer_phone,
        sc_whatsapp.phone_number as whatsapp_phone,
        s.created_at,
        s.updated_at
      FROM students s
      LEFT JOIN grade_levels gl ON s.grade_level_id = gl.id
      LEFT JOIN registrations r ON s.id = r.student_id
      LEFT JOIN subscription_types st ON r.subscription_type_id = st.id
      LEFT JOIN payments p ON s.id = p.student_id
      LEFT JOIN student_contacts sc_transfer ON s.id = sc_transfer.student_id AND sc_transfer.contact_type = 'transfer_phone'
      LEFT JOIN student_contacts sc_whatsapp ON s.id = sc_whatsapp.student_id AND sc_whatsapp.contact_type = 'whatsapp_phone';
    `);

    // Create analytics view
    await executeSQL(supabase, `
      CREATE OR REPLACE VIEW registration_analytics AS
      SELECT
        gl.name as grade_level,
        COUNT(s.id) as total_students,
        COUNT(CASE WHEN r.is_confirmed = true THEN 1 END) as confirmed_students,
        COUNT(CASE WHEN p.payment_status = 'confirmed' THEN 1 END) as paid_students,
        SUM(CASE WHEN p.payment_status = 'confirmed' THEN p.amount ELSE 0 END) as total_revenue,
        AVG(CASE WHEN p.payment_status = 'confirmed' THEN p.amount END) as avg_payment
      FROM students s
      LEFT JOIN grade_levels gl ON s.grade_level_id = gl.id
      LEFT JOIN registrations r ON s.id = r.student_id
      LEFT JOIN payments p ON s.id = p.student_id
      WHERE s.is_active = true
      GROUP BY gl.id, gl.name
      ORDER BY gl.sort_order;
    `);

    console.log('');
    console.log('üéâ Relational Database Created Successfully!');
    console.log('');
    console.log('üìä Database Structure Summary:');
    console.log('   ‚úÖ grade_levels - Lookup table for grade levels');
    console.log('   ‚úÖ subscription_types - Lookup table for subscription types');
    console.log('   ‚úÖ students - Main student information');
    console.log('   ‚úÖ student_contacts - Phone numbers and contact info');
    console.log('   ‚úÖ registrations - Registration records with timestamps');
    console.log('   ‚úÖ payments - Payment and transfer records');
    console.log('   ‚úÖ subscriptions - Active subscription tracking');
    console.log('   ‚úÖ student_performance - Academic performance tracking');
    console.log('   ‚úÖ admin_logs - Administrative activity logs');
    console.log('   ‚úÖ import_history - Data import tracking');
    console.log('');
    console.log('üìà Database Views Created:');
    console.log('   ‚úÖ student_summary - Comprehensive student overview');
    console.log('   ‚úÖ registration_analytics - Registration statistics');
    console.log('');
    console.log('‚ö° Performance Indexes Created:');
    console.log('   ‚úÖ Student codes, grades, contacts, payments, performance');
    console.log('');
    console.log('üîÑ Next Steps:');
    console.log('   1. Run: node import-google-sheets-relational.js');
    console.log('   2. Test: node test-relational-database.js');
    console.log('   3. Start: npm run dev-relational');

  } catch (error) {
    console.error('‚ùå Database creation failed:', error);
  }
}

// Helper function to execute SQL with error handling
async function executeSQL(supabase, sql) {
  try {
    const { error } = await supabase.rpc('exec_sql', { sql });
    if (error) {
      // If exec_sql doesn't exist, try direct query
      console.log('‚ö†Ô∏è  Using direct query method...');
      // Note: This is a simplified approach. In production, you'd use proper migrations
      return;
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  SQL execution note:', sql.split('\n')[0] + '...');
  }
}

// Run the database creation
if (require.main === module) {
  createRelationalDatabase();
}

module.exports = { createRelationalDatabase };
